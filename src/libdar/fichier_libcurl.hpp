/*********************************************************************/
// dar - disk archive - a backup/restoration program
// Copyright (C) 2002-2052 Denis Corbin
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// to contact the author : http://dar.linux.free.fr/email.html
/*********************************************************************/

    /// \file fichier_libcurl.hpp
    /// \brief class fichier_libcurl definition. This is a full implementation/inherited class of class fichier_global
    /// this type of object are generated by entrepot_libcurl.
    /// \ingroup Private

#ifndef FICHIER_LIBCURL_HPP
#define FICHIER_LIBCURL_HPP


#include "../my_config.h"

extern "C"
{
#if LIBCURL_AVAILABLE
#if HAVE_CURL_CURL_H
#include <curl/curl.h>
#endif
#endif
} // end extern "C"

#include <string>
#ifdef LIBTHREADAR_AVAILABLE
#include <libthreadar/libthreadar.hpp>
#endif
#include "integers.hpp"
#include "thread_cancellation.hpp"
#include "label.hpp"
#include "user_interaction.hpp"
#include "fichier_global.hpp"
#include "mycurl_easyhandle_sharing.hpp"

namespace libdar
{

	/// \addtogroup Private
	/// @{

#if defined ( LIBCURL_AVAILABLE ) && defined ( LIBTHREADAR_AVAILABLE )

	/// libcurl remote files

    class fichier_libcurl : public fichier_global, protected libthreadar::thread
    {
    public:

	    /// constructor
	fichier_libcurl(user_interaction & dialog,    //< for user interaction requested by fichier_global
			const std::string & chemin,   //< full path of the file to open
			const shared_handle & handle, //< the easy handle wrapper object
			gf_mode m,                    //< open mode
			U_I waiting,                  //< retry timeout in case of network error
			bool force_permission,        //< whether file permission should be modified
			U_I permission,               //< file permission to enforce if force_permission is set
			bool erase);                  //< whether to erase the file before writing to it

	    // no copy constructor available
	    // because we inherit from libthreadar::thread that has not copy constructor

	    // no assignment operator
	    // because we inherit from libthreadar::thread that has not copy constructor

	    /// destructor
	~fichier_libcurl() noexcept { detruit(); };

	    /// change the permission of the file
	virtual void change_permission(U_I perm);

	    /// set the ownership of the file
	virtual void change_ownership(const std::string & user, const std::string & group) { throw Efeature(gettext("user/group ownership not supported for this repository")); }; // not supported

	    /// return the size of the file
        infinint get_size() const;

	    /// set posix_fadvise for the whole file
	virtual void fadvise(advise adv) const {}; // not supported and ignored

            // inherited from generic_file
	bool skippable(skippability direction, const infinint & amount);
        bool skip(const infinint & pos);
        bool skip_to_eof();
        bool skip_relative(S_I x);
        infinint get_position() const { return current_offset; };

	    /// define the network side behavior
	    ///
	    /// \param[in] size is the byte size to be read at once, set to zero to avoid reading by block
	    /// \note by default libdar instruct libcurl to read as much possible data and extract it from
	    /// buffer when needed. This gives the maximum performance except that when libdar needs to skip
	    /// data and read further or before it leads libcurl to end the FTP control session, and thus
	    /// reconnect with a new FTP session. Some FTP server might not like the many FTP control sessions
	    /// generated while only one is needed (controling many data sessions). Reading by block let the
	    /// FTP order to end and avoid having libdar asking libcurl to interrupt the transfer which preserve
	    /// the control session. The drawback is that it implies network latency between each read block
	    /// and leads to the creation/destruction of many thread inside libdar.
	void read_limited_size_at_once(U_I size) { if(!metadatamode) throw SRC_BUG; network_block = size; };
	void read_limited_size_at_once() { read_limited_size_at_once(tampon_size); };

    protected:
	    // inherited from generic_file grand-parent class
	void inherited_read_ahead(const infinint & amount);
	void inherited_sync_write();
	void inherited_flush_read();
	void inherited_terminate();

	    // inherited from fichier_global parent class
	U_I fichier_global_inherited_write(const char *a, U_I size);
        bool fichier_global_inherited_read(char *a, U_I size, U_I & read, std::string & message);

	    // inherited from thread
	void inherited_run();

    private:
	static const U_I tampon_size = CURL_MAX_WRITE_SIZE;

	    // internal thread managed the data transfers between libcurl and object's buffer using callbacks
	    // object run in caller thread and fetches/drops data to object's buffers for data transfers but
	    // also suspend internal thread to proceed to control calling directly libcurl (metadata mode)
	bool end_data_mode;               //< true if subthread has been requested to end
	bool sub_is_dying;                //< is set by subthread when about to end
	shared_handle ehandle;            //< easy handle (wrapped in C++ object) that we modify when necessary
	bool metadatamode;                //< wether we are acting on metadata rather than file's data
	infinint current_offset;          //< current offset we are reading / writing at
	bool has_maxpos;                  //< true if maxpos is set
	infinint maxpos;                  //< in read mode this is the filesize, in write mode this the offset where to append data (not ovewriting)
	bool append_write;                //< whether we should append to data (and not replace) when uploading
	char meta_tampon[tampon_size];    //< trash in transit data used to carry metadata
	U_I meta_inbuf;                   //< amount of byte available in "meta_tampon"
	U_I wait_delay;                   //< time in second to wait before retrying in case of network error
	U_I network_block;                //< maximum amount of data read at once from the network
	infinint network_offset;          //< updated by sub thread in network block mode to give amount of bytes pushed to interthread
	infinint subthread_net_offset;    //< updated by sub thread in network block mode to give amount of bytes pushed to interthread
	infinint subthread_cur_offset;    //< subthread copy of current_offset
	libthreadar::fast_tampon<char> interthread; //< data channel for reading or writing with subthread
	libthreadar::barrier synchronize; //< used to be sure subthread has been launched

	void set_range(const infinint & begin, const infinint & range_size);
	void unset_range();
	void switch_to_metadata(bool mode);//< set to true to get or set file's metadata, false to read/write file's data
	void detruit();
	void run_thread();
	void stop_thread();
	void initialize_subthread();
	void finalize_subthread();

	static size_t write_data_callback(char *buffer, size_t size, size_t nmemb, void *userp);
	static size_t read_data_callback(char *bufptr, size_t size, size_t nitems, void *userp);
       	static size_t write_meta_callback(char *buffer, size_t size, size_t nmemb, void *userp);
	static size_t read_meta_callback(char *bufptr, size_t size, size_t nitems, void *userp);
    };

#endif

#ifdef LIBTHREADAR_AVAILABLE
	/// helper function to handle libcurl error code
	/// wait or throw an exception depending on error condition
	///
	/// \param[in] dialog used to report the reason we are waiting for and how much time we wait
	/// \param[in] err is the curl easy code to examin
	/// \param[in] wait_seconds is the time to wait for recoverable error
	/// \param[in] err_context is the error context message use to prepend waiting message or exception throw
    extern void fichier_libcurl_check_wait_or_throw(user_interaction & dialog,
						    CURLcode err,
						    U_I wait_seconds,
						    const std::string & err_context);
#else
#if LIBCURL_AVAILABLE
    inline void fichier_libcurl_check_wait_or_throw(user_interaction & dialog,
						    CURLcode err,
						    U_I wait_seconds,
						    const std::string & err_context)
    { throw SRC_BUG; }
#endif
#endif
	/// @}

} // end of namespace

#endif
